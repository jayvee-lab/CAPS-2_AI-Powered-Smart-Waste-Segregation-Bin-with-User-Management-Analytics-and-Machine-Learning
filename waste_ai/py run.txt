python material_detector_auto_camera.py


pip install mysql-connector-python


pip install opencv-python tensorflow mysql-connector-python pyserial


import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions

# Load pre-trained MobileNetV2 model
model = MobileNetV2(weights='imagenet')
IMG_SIZE = 224

# Auto-detect working webcam
def open_camera():
    for index in range(3):  # Try camera index 0, 1, 2
        cap = cv2.VideoCapture(index)
        if cap.isOpened():
            print(f"✅ Camera opened at index {index}. Press 'q' to quit.")
            return cap
        cap.release()
    print("❌ No camera found.")
    exit()

cap = open_camera()

# Main loop
while True:
    ret, frame = cap.read()
    if not ret:
        print("❌ Failed to read frame.")
        break

    # Resize and preprocess
    img = cv2.resize(frame, (IMG_SIZE, IMG_SIZE))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    # Predict using MobileNetV2
    predictions = model.predict(img_array)
    decoded = decode_predictions(predictions, top=1)[0][0]
    label = decoded[1].lower()

    # Check for material
    if "glass" in label:
        result = "GLASS"
        color = (0, 255, 0)
    elif "plastic" in label:
        result = "PLASTIC"
        color = (255, 255, 0)
    elif "paper" in label or "envelope" in label:
        result = "PAPER"
        color = (255, 0, 0)
    else:
        result = "UNKNOWN"
        color = (0, 0, 255)

    # Display result
    cv2.putText(frame, f"Detected: {result}", (10, 40),
                cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
    cv2.imshow("Material Detector", frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()


// ============

import cv2
import numpy as np
import tensorflow as tf
import mysql.connector
from datetime import date
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions

# Load model
model = MobileNetV2(weights='imagenet')
IMG_SIZE = 224

# MySQL DB config
db_config = {
    'host': 'localhost',
    'user': 'root',
    'password': '',
    'database': 'db_global_help'
}

def save_to_database(category):
    today = date.today()

    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # Check if the category exists for today
        cursor.execute("SELECT id, total FROM tbl_category_totals WHERE category=%s AND date=%s", (category, today))
        result = cursor.fetchone()

        if result:
            new_total = result[1] + 1
            cursor.execute("UPDATE tbl_category_totals SET total=%s WHERE id=%s", (new_total, result[0]))
        else:
            cursor.execute("INSERT INTO tbl_category_totals (category, total, date) VALUES (%s, %s, %s)", (category, 1, today))

        conn.commit()
        cursor.close()
        conn.close()
        print(f"✅ Saved: {category} ({today})")

    except mysql.connector.Error as e:
        print(f"❌ Database error: {e}")

# Open camera
def open_camera():
    for index in range(3):
        cap = cv2.VideoCapture(index)
        if cap.isOpened():
            print(f"✅ Camera opened at index {index}. Press 'q' to quit.")
            return cap
        cap.release()
    print("❌ No camera found.")
    exit()

cap = open_camera()
detected_set = set()  # To prevent multiple fast repeats

while True:
    ret, frame = cap.read()
    if not ret:
        print("❌ Failed to read frame.")
        break

    # Resize and preprocess
    img = cv2.resize(frame, (IMG_SIZE, IMG_SIZE))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    # Predict
    predictions = model.predict(img_array, verbose=0)
    decoded = decode_predictions(predictions, top=1)[0][0]
    label = decoded[1].lower()

    # Classification
    if "glass" in label:
        result = "GLASS"
        color = (0, 255, 0)
    elif "plastic" in label:
        result = "PLASTIC"
        color = (255, 255, 0)
    elif "paper" in label or "envelope" in label:
        result = "PAPER"
        color = (255, 0, 0)
    else:
        result = "UNKNOWN"
        color = (0, 0, 255)

    # Save only if it's new since last scan
    if result != "UNKNOWN" and result not in detected_set:
        save_to_database(result)
        detected_set.add(result)

    # Reset detection buffer every few frames (optional)
    if len(detected_set) >= 3:
        detected_set.clear()

    # Display result
    cv2.putText(frame, f"Detected: {result}", (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
    cv2.imshow("Material Detector", frame)

    # Exit
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()


// ==============

#include <Servo.h>

Servo myservo;
const int servoPin = 9;

void setup() {
  Serial.begin(9600);
  myservo.attach(servoPin);
  myservo.write(0);  // Start at 0 degrees
}

void loop() {
  if (Serial.available()) {
    char cmd = Serial.read();

    if (cmd == 'o') {
      myservo.write(100);      // Rotate to 180 degrees
      delay(5000);             // Hold for 5 seconds
      myservo.write(0);        // Back to 0
    }
  }
}
